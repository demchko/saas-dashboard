// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                  String     @id @default(cuid())
  name                String?
  email               String?    @unique
  emailVerified       DateTime?  @map("email_verified")
  image               String?
  accounts            Account[]
  sessions            Session[]
  onBoardingCompleted Boolean    @default(false)
  userType            UserType?
  company             Company?
  JobSeeker           JobSeeker?

  @@map("users")
}

enum UserType {
  COMPANY
  JOB_SEEKER
}

model Company {
  id        String   @id @default(uuid())
  name      String
  about     String
  logo      String
  website   String
  location  String
  xAccount  String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobSeeker {
  id     String @id @default(uuid())
  name   String
  about  String
  resume String
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
